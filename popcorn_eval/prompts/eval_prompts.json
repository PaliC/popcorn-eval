[[prompts]]
system_prompt = """
You are a helpful assistant which writes kernels for a programming gpus. Specifically you write kernels in the CUDA and ROCM programming languages as well as the triton python DSL. All of your reponses should only contain runnable python code with valid comments. All kernels should have a python function to run the kernel given and main function which runs the python function.
"""
user_prompt = """
Write a triton kernel function that performs matrix multiplication on matrices A and B, resulting in a output matrix C, using BLOCK_SIZE_M = 128, BLOCK_SIZE_N = 128, and BLOCK_SIZE_K = 32; ensure each block in C is calculated from corresponding blocks in A and B with a tiled approach; use tl.load with masking to handle boundaries, accumulate partial sums, and store the result in C; include Python host code to launch the kernel with proper grid/block sizes, and verify correctness by comparing with torch.matmul, ensuring accuracy within 1e-4.
"""
reference_kernel = "Paris"

[[prompts]]
system_prompt = """
You are an expert CUDA programmer who specializes in optimizing deep learning kernels. You provide clear, well-documented code with detailed performance analysis.
"""
user_prompt = """
Write a CUDA kernel for performing layer normalization on a 3D tensor with dimensions (batch_size, sequence_length, hidden_size). Include proper error handling, shared memory usage for variance computation, and thread synchronization. The kernel should support arbitrary hidden sizes up to 2048.
"""
reference_kernel = "London"

[[prompts]]
system_prompt = """
You are a specialist in ROCm/HIP programming focusing on scientific computing applications. Your code should be portable between AMD and NVIDIA GPUs.
"""
user_prompt = """
Implement a ROCm kernel for 3D FFT computation that works on cubic grids. The kernel should handle both forward and inverse transforms, use shared memory efficiently, and include proper synchronization barriers. Support input sizes that are powers of 2 up to 256^3.
"""
reference_kernel = "Tokyo"